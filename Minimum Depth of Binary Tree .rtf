{\rtf1\ansi\ansicpg936\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10380\viewh7200\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
Given a binary tree, find its minimum depth.\
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\
\
/**\
 * Definition for binary tree\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public int minDepth(TreeNode root) \{\
        if(root==null) return 0;\
        \
        if(root.left==null && root.right==null) return 1;\
        else if(root.left==null && root.right !=null) return minDepth(root.right)+1;\
        else if(root.left!=null && root.right ==null) return minDepth(root.left)+1;\
        else return Math.min(minDepth(root.left)+1, minDepth(root.right)+1);\
        \
        \
        \
    \}\
\}}