Subsets Total Accepted: 33844 Total Submissions: 120701 My Submissions Question Solution 
Given a set of distinct integers, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

public class Solution {
    public List<List<Integer>> subsets(int[] S) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>(); 
        Arrays.sort(S);
        result.add(temp);
        rec(result, temp, S,0);
        return result;
    }
      
    public void rec(List<List<Integer>> result, List<Integer> temp, int[] S, int pos){
        for(int i=pos; i<=S.length-1 ; i++){
           temp.add(S[i]);
           result.add(new ArrayList<Integer>(temp));
           rec(result, temp,S,i+1);
           temp.remove(temp.size()-1);
            
        }

        
    }
}

//List list.size(); Arrays.sort;


Python :
class Solution:
    # @param S, a list of integer
    # @return a list of lists of integer
    def subsets(self, S):
        S.sort()
        temp=[]
        self.result=[[]]
        self.dfs(S,temp,0)
        return self.result
    
    def dfs(self,S,temp,pos):
        i=pos
        while i < len(S):
            
       # for i in range(pos,len(S)):
            temp.append(S[i])
            self.result.append(list(temp))
            self.dfs(S,temp,i+1)
            temp.pop()
            i+=1

