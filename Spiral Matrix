Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

You should return [1,2,3,6,9,8,7,4,5]. 



public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        List<Integer> result = new ArrayList<Integer>();
        
        if(matrix==null || matrix.length==0) return result;
        
        int m=matrix.length;
        int n=matrix[0].length;
        
        
        
        int circle = (Math.min(m,n)+1)/2;
        
        for(int i=0; i<circle; i++){
            int lastrow=m-1-i;
            int lastcol=n-1-i;
            
            if(i==lastrow){
                for (int j=i;j<=lastcol; j++){
                    result.add(matrix[i][j]);
                }
            }
            else if(i==lastcol){
                for (int j=i; j<=lastrow; j++){
                    result.add(matrix[j][i]);
                }
                
            }else{
                for(int j=i; j<lastcol; j++){
                    result.add(matrix[i][j]);
                }
                for(int j=i; j<lastrow;j++){
                    result.add(matrix[j][lastcol]);
                }
                for(int j=lastcol; j>i;j--){
                    result.add(matrix[lastrow][j]);
                }
                for(int j=lastrow; j>i; j--){
                    result.add(matrix[j][i]);
                }
            }
            
            
            
            
            
            
            
        }
        
      return result;  
        
    }
}
