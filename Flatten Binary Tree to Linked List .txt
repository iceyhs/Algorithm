Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 // preorder traversal
public class Solution {
    public void flatten(TreeNode root) {
    Stack<TreeNode> stack =new Stack<TreeNode>();
    
    if (root==null) return;
    stack.push(root);
    TreeNode pre=null; //creat new tree
    
    while(!stack.empty()){
        TreeNode current = stack.pop();
        if(current.right!=null) stack.push(current.right);
        if(current.left!=null) stack.push(current.left);
         if(pre!=null){
            pre.left=null;
            pre.right=current;
             
         }
         
         pre=current;
    }
   
        
    }
}
