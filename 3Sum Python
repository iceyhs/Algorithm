Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
    
    
    class Solution:
    # @return a list of lists of length 3, [[val1,val2,val3]]
    def threeSum(self, num):
        result=[]
        if len(num)==0 or len(num)<3:
            return result
        
        num.sort()
        
        i=0
        while i< len(num)-2:
            if i>0 and num[i]==num[i-1]:
                i+=1
                continue
            
            start=i+1
            end=len(num)-1
            
            while start<end:
                sum=num[i]+num[start]+num[end]
                
                if sum>0:
                    end-=1
                elif sum<0:
                    start+=1
                elif start>i+1 and num[start]==num[start-1]:
                        start+=1
                elif end<len(num)-1 and num[end]==num[end+1]:
                        end-=1
                else:
                    result.append([num[i],num[start],num[end]])
                    start+=1
                    end-=1
    
            i+=1
        
        return result
            
        
