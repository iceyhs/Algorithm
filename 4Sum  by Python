Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
    
    
class Solution:
    # @return a list of lists of length 4, [[val1,val2,val3,val4]]
    def fourSum(self, num, target):
        result=[]
        num.sort()
        if len(num)==0:
            return result
            
        i=0
        
        for i in range(len(num)):
            if i>0 and num[i]==num[i-1]:
                continue
            for j in range(i+1,len(num)):
                if j>i+1 and num[j]==num[j-1]:
                    continue
                start=j+1
                end=len(num)-1
                while start<end:
                    sum=num[i]+num[j]+num[start]+num[end]
                    if sum<target:
                        start+=1
                    elif sum>target:
                        end-=1
                    elif start>j+1 and num[start]==num[start-1]:
                        start+=1
                    elif end<len(num)-1 and num[end]==num[end+1]:
                        end-=1
                    else:
                        result.append([num[i],num[j],num[start],num[end]])
                        start+=1
                        end-=1
                j+=1
            i+=1
           
           
        return result 
                        
                
                    
