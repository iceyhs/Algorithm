 Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

    Only one letter can be changed at a time
    Each intermediate word must exist in the dictionary

For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:

    Return 0 if there is no such transformation sequence.
    All words have the same length.
    All words contain only lowercase alphabetic characters.
    
    
    

public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {
        if(dict.size()==0) return 0;
        
        LinkedList<String> wordQ=new LinkedList<String>();
        LinkedList<Integer> distanceQ=new LinkedList<Integer>();
        
        wordQ.add(start);
        distanceQ.add(1);
        
        
        while(!wordQ.isEmpty()){
            String current = wordQ.pop();
            Integer distance = distanceQ.pop();
            
            if(current.equals(end)){
                return distance;
            }
            
            
            for(int i=0; i<current.length();i++){
                char[] currentArray = current.toCharArray();
                for (char c='a'; c<'z'; c++){
                    currentArray[i]=c;
                    
                    String newword = new String(currentArray);
                    
                    if(dict.contains(newword)){
                        wordQ.add(newword);
                        distanceQ.add(distance+1);
                        
                        dict.remove(newword);
                        
                    }
                    
                    
                    
                }
                
                
            }
            
            
            
            
        }
        
      return 0;  
        
    }
}
