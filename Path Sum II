Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
       
        rec(result, temp, root, sum);
        return result;
    }
    
    public void rec(List<List<Integer>> result, List<Integer> temp, TreeNode root, int sum){
         if(root==null)  return;
         sum=sum-root.val;
          temp.add(root.val);
          
         if(root.left==null && root.right==null && sum==0){
             result.add(new ArrayList<Integer>(temp));
             return;
         }
         
         if(root.left!=null)
         {rec(result, temp, root.left, sum);
         temp.remove(temp.size()-1);}
         if(root.right!=null)
         {rec(result, temp, root.right, sum);
         temp.remove(temp.size()-1);}
         
         
      
    }
    
    
    
    
}
