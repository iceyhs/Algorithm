 Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5 


 // recursion
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
       return reverseK(head, k, getLength(head));
        
    }
    
    public ListNode reverseK(ListNode head, int k, int len){
        if(k==1 || k>len || head==null) return head;
        int i=2;
        ListNode dummy = new ListNode(0);
        ListNode PreV=dummy; 
        ListNode Pre=head;
        ListNode current = Pre.next;

        while(i<=k){
            ListNode next=current.next;
            Pre.next=current.next;
            PreV.next=current;
            current.next=Pre;
            
            current=next;
            i++;
        }
        
        
        
        current.next=reverseK(current.next, k, len-k);
        return head;
        
    }
    
    public int getLength(ListNode head){
        int len=0;
        while(head!=null){
            len++;
            head=head.next;
        }
        return len;
    }
}
