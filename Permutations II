 Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1]. 


//Arrays.sort();



public class Solution {
    public List<List<Integer>> permuteUnique(int[] num) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(num);
        List<Integer> temp = new ArrayList<Integer>();
        if(num.length==0) return result;
        boolean[] visited = new boolean[num.length];
        rec(num,visited,result,temp);
        return result;
    }
    private void rec(int[] num, boolean[] visited, List<List<Integer>> result, List<Integer> temp){
        if(temp.size()==num.length){
            result.add(new ArrayList<Integer>(temp));
            return;
        }
            for(int i=0; i<num.length; i++){
                
                if(visited[i]==true || (i!=0 && num [i]==num[i-1] && visited[i-1]==false)) 
                {
                  continue;}
                
                visited[i]=true;
                temp.add(num[i]);
                rec(num,visited,result,temp);
                temp.remove(temp.size()-1);
                visited[i]=false;
            }
        
    }
}
