Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack


class MinStack:
    # @param x, an integer
    # @return an integer
    
    def __init__(self):
        self.result=[]
        self.resultmin=[]
    
    
    def push(self, x):
        self.result.append(x)
        if len(self.resultmin)==0 or x<=self.resultmin[-1]:
            self.resultmin.append(x)
        

    # @return nothing
    def pop(self):
        
        if self.result[-1]==self.resultmin[-1]:
            self.resultmin.pop()
        self.result.pop()
        

    # @return an integer
    def top(self):
        if len(self.result)==0:
            return None
        else:
            
            return self.result[-1]
        

    # @return an integer
    def getMin(self):
        if len(self.resultmin)==0:
            return None
        else:
            
            return self.resultmin[-1]
        
            
        
