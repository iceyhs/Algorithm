Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].


public class Solution {
    public int[] searchRange(int[] A, int target) {
       if(A==null) return null;
       int[] result = {-1,-1};
       
       int low= binarySearch(A,target-0.5);
       if((low>=A.length)||(A[low]!=target)) return result;
       
       
       result[0]=low;
       int high=binarySearch(A, target+0.5)-1;
       result[1]=high;
       
     return result;
    }
    
    
    public int binarySearch(int[] A, double target) {  
       int start=0;
       int end=A.length-1;
       
       while (start<=end){
         int mid= (start+end)/2;
         if(A[mid]==target)   return mid;
         
         if(A[mid]<target) start=mid+1;
         if(A[mid]>target) end=mid-1;

       } 
       
      return start; 
    }
    
    
}
