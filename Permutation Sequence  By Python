The set [1,2,3,â€¦,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

#Let num = [1,2,3,...,n]. The first digit is k/(n-1)!, then let k = k % (n-1)! and remove this digit from num. The second digit is k/(n-2)!, then let k = k % (n-2)! and remove this digit from num and so on.


class Solution:
    # @return a string
    def getPermutation(self, n, k):
        res=''
        k-=1
        factorial=1
        for i in range(1,n): #(n-1)!
            factorial*=i
        num=[i for i in range(1,n+1)] #[1...n]
        for i in reversed(range(n)): #[n-1,n-2...0]
            curr=num[k/factorial]
            res+=str(curr)
            num.remove(curr)
            
            if i!=0:
                k=k%factorial
                factorial=factorial/i
                
        return res
