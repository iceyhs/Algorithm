Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.


public class Solution {
    int result=0;
    
    public int totalNQueens(int n) {
       int[] col = new int[n];
        dfs(n,0,col);
        return result;
    }
    
    private void dfs(int n, int currow,int[] col){
        if(currow==n){
            result++;
            return; //退出这层递归
        }
        
        for(int i=0; i<n; i++){
           col[currow]=i;
           if(isValid(n, currow, col)){
              dfs(n,currow+1,col); 
           }
       }
        
        
    }
    
    
      private boolean isValid(int n, int currow, int[] col ){
          for(int i=0; i<currow; i++){
           if(col[currow]==col[i] || Math.abs(i-currow)==Math.abs(col[i]-col[currow]))
              return false;
          }
          
         return true; 
      }
}
